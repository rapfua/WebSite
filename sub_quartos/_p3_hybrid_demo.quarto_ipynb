{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 3\n",
        "\n",
        "##  {.sidebar width=\"300px\"}\n"
      ],
      "id": "5b90cacb"
    },
    {
      "cell_type": "code",
      "metadata": {
        "cache": true
      },
      "source": [
        "#| label: input_selects_100\n",
        "\n",
        "\n",
        "\n",
        "input_select_width = 10\n",
        "\n",
        "L = list(range(100, 501, 100))\n",
        "L.insert(0, 50)\n",
        "\n",
        "ui.input_select(\"n100\", \"Number of nodes in each cluster:\",\n",
        "                choices=L,\n",
        "                selected=50,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "ui.input_select(\"d100\", \"Number of dimensions & communities:\",\n",
        "                choices=list((2, 3, 4)),\n",
        "                selected=2,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "# for graph creation (& spectral clustering)\n",
        "ui.input_select(\"n_neighbors100\", \"Number of nearest neighbors \",\n",
        "                choices=list(range(5, 21)),\n",
        "                selected=10,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "# ui.input_select(\"n_neighbors\", \"Number of nearest neighbors for spectral clustering:\",\n",
        "#                 choices=list(range(3, 16)),\n",
        "#                 selected=4,\n",
        "#                 width=input_select_width\n",
        "# )\n",
        "\n",
        "ui.input_select(\"mu_x2100\", \"Mean of the second Gaussian with respect to the x-axis:\",\n",
        "                choices=list(range(1, 21)),\n",
        "                selected=3,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "\n",
        "ui.input_select(\"λ100\", \"Intensity parameter (N_n ~ Poisson(λ * n)):\",\n",
        "                choices=[1],\n",
        "                selected=1,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "ui.input_select(\"R_1100\", \"Big radius for intra-community edges:\",\n",
        "                choices=[round(i * 0.01, 2) for i in range(1, 201)],\n",
        "                selected= 1,\n",
        "                width=input_select_width\n",
        ")\n",
        "\n",
        "ui.input_select(\"R_2100\", \"Small radius for inter-community edges:\",\n",
        "                choices=[round(i * 0.01, 2) for i in range(1, 101)],\n",
        "                selected=0.5,\n",
        "                width=input_select_width\n",
        ")"
      ],
      "id": "input_selects_100",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Column\n"
      ],
      "id": "e1bb8edc"
    },
    {
      "cell_type": "code",
      "metadata": {
        "cache": true
      },
      "source": [
        "#| label: shiny_gaussian_ABBE_hybrid_simulation\n",
        "@render.plot\n",
        "def graph_gaussian_clusters_ABBE_prediction_PLOT():\n",
        "  \n",
        "    \n",
        "    n           = int(input.n100())\n",
        "    d           = int(input.d100())\n",
        "    n_clusters  = d\n",
        "    n_neighbors = int(input.n_neighbors100())\n",
        "    mu_x100       = float(input.mu_x2100())\n",
        "    λ           = int(input.λ100())\n",
        "\n",
        "    F = make_F(f(φ(float(input.R_1100()))), f(φ(float(input.R_2100()))))\n",
        "    \n",
        "    # Generate samples separately\n",
        "    samples = produce_samples(n, d, type_samples=\"gaussian\", mu_x2=mu_x100)\n",
        "    \n",
        "    # Update G_distance separately\n",
        "    G = produce_distance_graph(samples, n, d, framework='hybrid', F=F)\n",
        "\n",
        "    col_slice = slice(1, samples.shape[1] + 1)\n",
        "\n",
        "    W = get_Gaussian_weight_matrix(samples[:, col_slice], n_neighbors)\n",
        "\n",
        "    edges = list(G.edges())\n",
        "    weights = {(u, v): 1 / W[u, v] - 1 if W[u, v] > 0 else float('inf') for u, v in edges}\n",
        "    nx.set_edge_attributes(G, weights, 'weight')\n",
        "    \n",
        "    mb_igraph = get_metric_backbone_igraph(G)\n",
        "    \n",
        "    fig, axs = plt.subplots(2, 2, figsize=(12, 12))\n",
        "    \n",
        "    similarity_original, similarity_mb = draw(\n",
        "      G,\n",
        "      mb_igraph,\n",
        "      samples,\n",
        "      n_neighbors,\n",
        "      axs,\n",
        "      n_clusters,\n",
        "      L_idx=[0, 1]\n",
        "    )\n",
        "\n",
        "\n",
        "    for i in range(2):\n",
        "        for j in range(2):\n",
        "            ax = axs[i, j]\n",
        "            ax.set_xlabel('X-axis')\n",
        "            ax.set_ylabel('Y-axis')\n",
        "            ax.axis('equal')\n",
        "            ax.axis('on')\n",
        "            ax.tick_params(left=True, bottom=True, labelleft=True, labelbottom=True)\n",
        "            ax.legend(\n",
        "              handles=[produce_patch(color='red', framework='gaussian', mu_x2=0),\n",
        "                       produce_patch(color='blue', framework='gaussian', mu_x2=mu_x100)]\n",
        "             )\n",
        "\n",
        "\n",
        "    axs[0, 0].set_title(f'Gaussian Samples with {n} nodes in each cluster, inter-proportion: {get_inter_proportion(G) * 100:.2f}%')\n",
        "    axs[0, 1].set_title(f'Metric Backbone, inter-proportion: {get_inter_proportion(mb_igraph) * 100:.2f}%')\n",
        "    \n",
        "    axs[1, 0].set_title(f'SC: Gaussian Samples with {n} nodes in each cluster, ARI: {similarity_original * 100:.2f}%')\n",
        "    axs[1, 1].set_title(f'SC: Metric Backbone, ARI: {similarity_mb * 100:.2f}%')\n"
      ],
      "id": "shiny_gaussian_ABBE_hybrid_simulation",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/cloud/python/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}